-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pca_step1 is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pca_step1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pca_step1,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=971,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=2748,HLS_SYN_LUT=3305,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_40A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000101000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal src_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal r_reg_242 : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_aesl_mux_load_5_5_x_s_fu_290_ap_ready : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_1_cast_fu_333_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_cast_reg_598 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_cast_fu_347_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_cast_reg_603 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_cast_fu_361_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_cast_reg_608 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_cast_fu_375_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_cast_reg_613 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_cast_fu_389_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_cast_reg_618 : STD_LOGIC_VECTOR (30 downto 0);
    signal src_49_reg_623 : STD_LOGIC_VECTOR (29 downto 0);
    signal src_37_reg_628 : STD_LOGIC_VECTOR (29 downto 0);
    signal src_25_reg_633 : STD_LOGIC_VECTOR (29 downto 0);
    signal src_13_reg_638 : STD_LOGIC_VECTOR (29 downto 0);
    signal src_01_reg_643 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_1_fu_489_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_1_reg_651 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_2_fu_501_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_2_reg_659 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal average_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal c_3_fu_513_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_3_reg_677 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal dst_012_sum_fu_523_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal dst_012_sum_reg_682 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_114_sum_fu_528_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal dst_114_sum_reg_687 : STD_LOGIC_VECTOR (30 downto 0);
    signal dst_216_sum_fu_533_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal dst_216_sum_reg_692 : STD_LOGIC_VECTOR (30 downto 0);
    signal dst_318_sum_fu_538_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal dst_318_sum_reg_697 : STD_LOGIC_VECTOR (30 downto 0);
    signal dst_420_sum_fu_543_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal dst_420_sum_reg_702 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_predicate_op142_writereq_state25 : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_ap_start : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_ap_idle : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWVALID : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WVALID : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WLAST : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARVALID : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_RREADY : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_BREADY : STD_LOGIC;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_empty : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_254 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_reg_278 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_predicate_op176_writeresp_state31 : BOOLEAN;
    signal ap_block_state31 : BOOLEAN;
    signal grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg : STD_LOGIC := '0';
    signal exitcond1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_012_sum_cast_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_114_sum_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_216_sum_cast_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_318_sum_cast_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_420_sum_cast_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_predicate_op147_write_state26 : BOOLEAN;
    signal ap_block_state26_io : BOOLEAN;
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_1_fu_323_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_337_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_351_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_365_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_379_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_cast_fu_519_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_306_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_306_ce : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component aesl_mux_load_5_5_x_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_empty_4_AWVALID : OUT STD_LOGIC;
        m_axi_empty_4_AWREADY : IN STD_LOGIC;
        m_axi_empty_4_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_empty_4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_empty_4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_empty_4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_empty_4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_empty_4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_empty_4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_empty_4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_empty_4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_empty_4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_WVALID : OUT STD_LOGIC;
        m_axi_empty_4_WREADY : IN STD_LOGIC;
        m_axi_empty_4_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_empty_4_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_empty_4_WLAST : OUT STD_LOGIC;
        m_axi_empty_4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_ARVALID : OUT STD_LOGIC;
        m_axi_empty_4_ARREADY : IN STD_LOGIC;
        m_axi_empty_4_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_empty_4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_empty_4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_empty_4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_empty_4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_empty_4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_empty_4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_empty_4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_empty_4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_empty_4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_RVALID : IN STD_LOGIC;
        m_axi_empty_4_RREADY : OUT STD_LOGIC;
        m_axi_empty_4_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_empty_4_RLAST : IN STD_LOGIC;
        m_axi_empty_4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_empty_4_BVALID : IN STD_LOGIC;
        m_axi_empty_4_BREADY : OUT STD_LOGIC;
        m_axi_empty_4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_empty_4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_empty_4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        p_offset1 : IN STD_LOGIC_VECTOR (29 downto 0);
        p_offset2 : IN STD_LOGIC_VECTOR (29 downto 0);
        p_offset3 : IN STD_LOGIC_VECTOR (29 downto 0);
        p_offset4 : IN STD_LOGIC_VECTOR (29 downto 0);
        empty_5 : IN STD_LOGIC_VECTOR (2 downto 0);
        empty : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pca_step1_faddfsubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pca_step1_fdiv_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pca_step1_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        src_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_4 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pca_step1_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pca_step1_AXILiteS_s_axi_U : component pca_step1_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_3F800000,
        src_0 => src_0,
        src_1 => src_1,
        src_2 => src_2,
        src_3 => src_3,
        src_4 => src_4,
        dst_0 => dst_0,
        dst_1 => dst_1,
        dst_2 => dst_2,
        dst_3 => dst_3,
        dst_4 => dst_4);

    pca_step1_gmem_m_axi_U : component pca_step1_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARADDR,
        I_ARID => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARID,
        I_ARLEN => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLEN,
        I_ARSIZE => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARSIZE,
        I_ARLOCK => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLOCK,
        I_ARCACHE => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARCACHE,
        I_ARQOS => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARQOS,
        I_ARPROT => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARPROT,
        I_ARUSER => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARUSER,
        I_ARBURST => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARBURST,
        I_ARREGION => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => tmp_7_reg_707,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    grp_aesl_mux_load_5_5_x_s_fu_290 : component aesl_mux_load_5_5_x_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aesl_mux_load_5_5_x_s_fu_290_ap_start,
        ap_done => grp_aesl_mux_load_5_5_x_s_fu_290_ap_done,
        ap_idle => grp_aesl_mux_load_5_5_x_s_fu_290_ap_idle,
        ap_ready => grp_aesl_mux_load_5_5_x_s_fu_290_ap_ready,
        m_axi_empty_4_AWVALID => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWVALID,
        m_axi_empty_4_AWREADY => ap_const_logic_0,
        m_axi_empty_4_AWADDR => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWADDR,
        m_axi_empty_4_AWID => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWID,
        m_axi_empty_4_AWLEN => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWLEN,
        m_axi_empty_4_AWSIZE => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWSIZE,
        m_axi_empty_4_AWBURST => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWBURST,
        m_axi_empty_4_AWLOCK => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWLOCK,
        m_axi_empty_4_AWCACHE => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWCACHE,
        m_axi_empty_4_AWPROT => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWPROT,
        m_axi_empty_4_AWQOS => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWQOS,
        m_axi_empty_4_AWREGION => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWREGION,
        m_axi_empty_4_AWUSER => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWUSER,
        m_axi_empty_4_WVALID => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WVALID,
        m_axi_empty_4_WREADY => ap_const_logic_0,
        m_axi_empty_4_WDATA => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WDATA,
        m_axi_empty_4_WSTRB => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WSTRB,
        m_axi_empty_4_WLAST => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WLAST,
        m_axi_empty_4_WID => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WID,
        m_axi_empty_4_WUSER => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WUSER,
        m_axi_empty_4_ARVALID => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARVALID,
        m_axi_empty_4_ARREADY => gmem_ARREADY,
        m_axi_empty_4_ARADDR => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARADDR,
        m_axi_empty_4_ARID => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARID,
        m_axi_empty_4_ARLEN => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLEN,
        m_axi_empty_4_ARSIZE => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARSIZE,
        m_axi_empty_4_ARBURST => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARBURST,
        m_axi_empty_4_ARLOCK => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLOCK,
        m_axi_empty_4_ARCACHE => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARCACHE,
        m_axi_empty_4_ARPROT => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARPROT,
        m_axi_empty_4_ARQOS => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARQOS,
        m_axi_empty_4_ARREGION => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARREGION,
        m_axi_empty_4_ARUSER => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARUSER,
        m_axi_empty_4_RVALID => gmem_RVALID,
        m_axi_empty_4_RREADY => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_RREADY,
        m_axi_empty_4_RDATA => gmem_RDATA,
        m_axi_empty_4_RLAST => gmem_RLAST,
        m_axi_empty_4_RID => gmem_RID,
        m_axi_empty_4_RUSER => gmem_RUSER,
        m_axi_empty_4_RRESP => gmem_RRESP,
        m_axi_empty_4_BVALID => ap_const_logic_0,
        m_axi_empty_4_BREADY => grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_BREADY,
        m_axi_empty_4_BRESP => ap_const_lv2_0,
        m_axi_empty_4_BID => ap_const_lv1_0,
        m_axi_empty_4_BUSER => ap_const_lv1_0,
        p_offset => src_01_reg_643,
        p_offset1 => src_13_reg_638,
        p_offset2 => src_25_reg_633,
        p_offset3 => src_37_reg_628,
        p_offset4 => src_49_reg_623,
        empty_5 => r_reg_242,
        empty => grp_aesl_mux_load_5_5_x_s_fu_290_empty,
        ap_return => grp_aesl_mux_load_5_5_x_s_fu_290_ap_return);

    pca_step1_faddfsubkb_U9 : component pca_step1_faddfsubkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_306_p0,
        din1 => grp_fu_306_p1,
        opcode => grp_fu_306_opcode,
        ce => grp_fu_306_ce,
        dout => grp_fu_306_p2);

    pca_step1_fdiv_32cud_U10 : component pca_step1_fdiv_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_reg_266,
        din1 => ap_const_lv32_40A00000,
        ce => ap_const_logic_1,
        dout => grp_fu_311_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_predicate_op142_writereq_state25 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_3)) or ((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_2)) or ((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_1)) or ((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_0)))) then 
                    ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                elsif ((((ap_predicate_op142_writereq_state25 = ap_const_boolean_1) and (gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_0)))) then 
                    ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state26_io) and (ap_predicate_op147_write_state26 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_3)) or ((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_2)) or ((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_1)) or ((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_0)))) then 
                    ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                elsif ((((ap_predicate_op147_write_state26 = ap_const_boolean_1) and (gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_0)))) then 
                    ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg <= ap_const_logic_0;
            else
                if ((((exitcond_fu_507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((exitcond1_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aesl_mux_load_5_5_x_s_fu_290_ap_ready = ap_const_logic_1)) then 
                    grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)))) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                c_1_reg_278 <= c_3_reg_677;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                c_1_reg_278 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_reg_254 <= c_2_reg_659;
            elsif (((exitcond2_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_reg_254 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                r_reg_242 <= r_1_reg_651;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_reg_242 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_reg_266 <= grp_fu_306_p2;
            elsif (((exitcond2_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_reg_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                average_reg_669 <= grp_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_2_reg_659 <= c_2_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                c_3_reg_677 <= c_3_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                dst_012_sum_reg_682 <= dst_012_sum_fu_523_p2;
                dst_114_sum_reg_687 <= dst_114_sum_fu_528_p2;
                dst_216_sum_reg_692 <= dst_216_sum_fu_533_p2;
                dst_318_sum_reg_697 <= dst_318_sum_fu_538_p2;
                dst_420_sum_reg_702 <= dst_420_sum_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_1_reg_651 <= r_1_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_aesl_mux_load_5_5_x_s_fu_290_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((grp_aesl_mux_load_5_5_x_s_fu_290_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_317 <= grp_aesl_mux_load_5_5_x_s_fu_290_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                src_01_reg_643 <= src_0(31 downto 2);
                src_13_reg_638 <= src_1(31 downto 2);
                src_25_reg_633 <= src_2(31 downto 2);
                src_37_reg_628 <= src_3(31 downto 2);
                src_49_reg_623 <= src_4(31 downto 2);
                    tmp_1_cast_reg_598(29 downto 0) <= tmp_1_cast_fu_333_p1(29 downto 0);
                    tmp_2_cast_reg_603(29 downto 0) <= tmp_2_cast_fu_347_p1(29 downto 0);
                    tmp_3_cast_reg_608(29 downto 0) <= tmp_3_cast_fu_361_p1(29 downto 0);
                    tmp_4_cast_reg_613(29 downto 0) <= tmp_4_cast_fu_375_p1(29 downto 0);
                    tmp_5_cast_reg_618(29 downto 0) <= tmp_5_cast_fu_389_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                tmp_7_reg_707 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    tmp_1_cast_reg_598(30) <= '0';
    tmp_2_cast_reg_603(30) <= '0';
    tmp_3_cast_reg_608(30) <= '0';
    tmp_4_cast_reg_613(30) <= '0';
    tmp_5_cast_reg_618(30) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state25, r_reg_242, ap_CS_fsm_state26, ap_CS_fsm_state31, gmem_BVALID, ap_CS_fsm_state4, grp_aesl_mux_load_5_5_x_s_fu_290_ap_done, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state20, exitcond_fu_507_p2, ap_block_state25_io, exitcond2_fu_483_p2, ap_predicate_op176_writeresp_state31, exitcond1_fu_495_p2, ap_block_state26_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_aesl_mux_load_5_5_x_s_fu_290_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((exitcond_fu_507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((grp_aesl_mux_load_5_5_x_s_fu_290_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if ((not((((ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)))) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state25_io_assign_proc : process(r_reg_242, ap_sig_ioackin_gmem_AWREADY, ap_predicate_op142_writereq_state25)
    begin
                ap_block_state25_io <= (((ap_predicate_op142_writereq_state25 = ap_const_boolean_1) and (ap_sig_ioackin_gmem_AWREADY = ap_const_logic_0)) or ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)));
    end process;


    ap_block_state26_io_assign_proc : process(r_reg_242, ap_sig_ioackin_gmem_WREADY, ap_predicate_op147_write_state26)
    begin
                ap_block_state26_io <= (((ap_predicate_op147_write_state26 = ap_const_boolean_1) and (ap_sig_ioackin_gmem_WREADY = ap_const_logic_0)) or ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)));
    end process;


    ap_block_state31_assign_proc : process(r_reg_242, gmem_BVALID, ap_predicate_op176_writeresp_state31)
    begin
                ap_block_state31 <= (((ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_483_p2)
    begin
        if (((exitcond2_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op142_writereq_state25_assign_proc : process(r_reg_242)
    begin
                ap_predicate_op142_writereq_state25 <= (not((r_reg_242 = ap_const_lv3_3)) and not((r_reg_242 = ap_const_lv3_2)) and not((r_reg_242 = ap_const_lv3_1)) and not((r_reg_242 = ap_const_lv3_0)));
    end process;


    ap_predicate_op147_write_state26_assign_proc : process(r_reg_242)
    begin
                ap_predicate_op147_write_state26 <= (not((r_reg_242 = ap_const_lv3_3)) and not((r_reg_242 = ap_const_lv3_2)) and not((r_reg_242 = ap_const_lv3_1)) and not((r_reg_242 = ap_const_lv3_0)));
    end process;


    ap_predicate_op176_writeresp_state31_assign_proc : process(r_reg_242)
    begin
                ap_predicate_op176_writeresp_state31 <= (not((r_reg_242 = ap_const_lv3_3)) and not((r_reg_242 = ap_const_lv3_2)) and not((r_reg_242 = ap_const_lv3_1)) and not((r_reg_242 = ap_const_lv3_0)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_483_p2)
    begin
        if (((exitcond2_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_2_fu_501_p2 <= std_logic_vector(unsigned(c_reg_254) + unsigned(ap_const_lv3_1));
    c_3_fu_513_p2 <= std_logic_vector(unsigned(c_1_reg_278) + unsigned(ap_const_lv3_1));
    dst_012_sum_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_012_sum_reg_682),64));
    dst_012_sum_fu_523_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_519_p1) + unsigned(tmp_5_cast_reg_618));
    dst_114_sum_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_114_sum_reg_687),64));
    dst_114_sum_fu_528_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_519_p1) + unsigned(tmp_4_cast_reg_613));
    dst_216_sum_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_216_sum_reg_692),64));
    dst_216_sum_fu_533_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_519_p1) + unsigned(tmp_3_cast_reg_608));
    dst_318_sum_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_318_sum_reg_697),64));
    dst_318_sum_fu_538_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_519_p1) + unsigned(tmp_2_cast_reg_603));
    dst_420_sum_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_420_sum_reg_702),64));
    dst_420_sum_fu_543_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_519_p1) + unsigned(tmp_1_cast_reg_598));
    exitcond1_fu_495_p2 <= "1" when (c_reg_254 = ap_const_lv3_5) else "0";
    exitcond2_fu_483_p2 <= "1" when (r_reg_242 = ap_const_lv3_5) else "0";
    exitcond_fu_507_p2 <= "1" when (c_1_reg_278 = ap_const_lv3_5) else "0";

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state3, ap_CS_fsm_state20, exitcond_fu_507_p2, grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARVALID, exitcond1_fu_495_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((exitcond1_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_ARVALID <= grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state25, r_reg_242, ap_predicate_op142_writereq_state25, dst_012_sum_cast_fu_548_p1, dst_114_sum_cast_fu_558_p1, dst_216_sum_cast_fu_568_p1, dst_318_sum_cast_fu_578_p1, dst_420_sum_cast_fu_588_p1, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
            if ((ap_predicate_op142_writereq_state25 = ap_const_boolean_1)) then 
                gmem_AWADDR <= dst_420_sum_cast_fu_588_p1(32 - 1 downto 0);
            elsif ((r_reg_242 = ap_const_lv3_0)) then 
                gmem_AWADDR <= dst_012_sum_cast_fu_548_p1(32 - 1 downto 0);
            elsif ((r_reg_242 = ap_const_lv3_1)) then 
                gmem_AWADDR <= dst_114_sum_cast_fu_558_p1(32 - 1 downto 0);
            elsif ((r_reg_242 = ap_const_lv3_2)) then 
                gmem_AWADDR <= dst_216_sum_cast_fu_568_p1(32 - 1 downto 0);
            elsif ((r_reg_242 = ap_const_lv3_3)) then 
                gmem_AWADDR <= dst_318_sum_cast_fu_578_p1(32 - 1 downto 0);
            else 
                gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state25, r_reg_242, ap_predicate_op142_writereq_state25, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((((ap_predicate_op142_writereq_state25 = ap_const_boolean_1) and (ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_3)) or ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_2)) or ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_1)) or ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_0)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(r_reg_242, ap_CS_fsm_state31, gmem_BVALID, ap_predicate_op176_writeresp_state31)
    begin
        if (((not((((ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)))) and (ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or (not((((ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)))) and (ap_const_logic_1 = ap_CS_fsm_state31) and (r_reg_242 = ap_const_lv3_3)) or (not((((ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)))) and (ap_const_logic_1 = ap_CS_fsm_state31) and (r_reg_242 = ap_const_lv3_2)) or (not((((ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)))) and (ap_const_logic_1 = ap_CS_fsm_state31) and (r_reg_242 = ap_const_lv3_1)) or (not((((ap_predicate_op176_writeresp_state31 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_3)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_2)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_1)) or ((gmem_BVALID = ap_const_logic_0) and (r_reg_242 = ap_const_lv3_0)))) and (ap_const_logic_1 = ap_CS_fsm_state31) and (r_reg_242 = ap_const_lv3_0)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state3, ap_CS_fsm_state20, exitcond_fu_507_p2, grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_RREADY, exitcond1_fu_495_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((exitcond1_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_RREADY <= grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(r_reg_242, ap_CS_fsm_state26, ap_reg_ioackin_gmem_WREADY, ap_predicate_op147_write_state26)
    begin
        if ((((ap_predicate_op147_write_state26 = ap_const_boolean_1) and (ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_3)) or ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_2)) or ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_1)) or ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_0)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state25, r_reg_242)
    begin
        if (((not((r_reg_242 = ap_const_lv3_3)) and not((r_reg_242 = ap_const_lv3_2)) and not((r_reg_242 = ap_const_lv3_1)) and not((r_reg_242 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_3)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_2)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (r_reg_242 = ap_const_lv3_0)))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, r_reg_242, ap_CS_fsm_state31)
    begin
        if (((not((r_reg_242 = ap_const_lv3_3)) and not((r_reg_242 = ap_const_lv3_2)) and not((r_reg_242 = ap_const_lv3_1)) and not((r_reg_242 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (r_reg_242 = ap_const_lv3_3)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (r_reg_242 = ap_const_lv3_2)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (r_reg_242 = ap_const_lv3_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (r_reg_242 = ap_const_lv3_0)))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, r_reg_242, ap_CS_fsm_state26)
    begin
        if (((not((r_reg_242 = ap_const_lv3_3)) and not((r_reg_242 = ap_const_lv3_2)) and not((r_reg_242 = ap_const_lv3_1)) and not((r_reg_242 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_3)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_2)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (r_reg_242 = ap_const_lv3_0)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_aesl_mux_load_5_5_x_s_fu_290_ap_start <= grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg;

    grp_aesl_mux_load_5_5_x_s_fu_290_empty_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state21, c_reg_254, c_1_reg_278)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_aesl_mux_load_5_5_x_s_fu_290_empty <= c_1_reg_278;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_aesl_mux_load_5_5_x_s_fu_290_empty <= c_reg_254;
        else 
            grp_aesl_mux_load_5_5_x_s_fu_290_empty <= "XXX";
        end if; 
    end process;


    grp_fu_306_ce_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state8, ap_block_state25_io, ap_CS_fsm_state5, ap_CS_fsm_state22, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            grp_fu_306_ce <= ap_const_logic_1;
        else 
            grp_fu_306_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_306_opcode_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_306_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_306_opcode <= ap_const_lv2_0;
        else 
            grp_fu_306_opcode <= "XX";
        end if; 
    end process;


    grp_fu_306_p0_assign_proc : process(reg_317, sum_reg_266, ap_CS_fsm_state5, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_306_p0 <= reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_306_p0 <= sum_reg_266;
        else 
            grp_fu_306_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_306_p1_assign_proc : process(reg_317, average_reg_669, ap_CS_fsm_state5, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_306_p1 <= average_reg_669;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_306_p1 <= reg_317;
        else 
            grp_fu_306_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    r_1_fu_489_p2 <= std_logic_vector(unsigned(r_reg_242) + unsigned(ap_const_lv3_1));
    tmp_1_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_323_p4),31));
    tmp_1_fu_323_p4 <= dst_4(31 downto 2);
    tmp_2_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_337_p4),31));
    tmp_2_fu_337_p4 <= dst_3(31 downto 2);
    tmp_3_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_351_p4),31));
    tmp_3_fu_351_p4 <= dst_2(31 downto 2);
    tmp_4_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_365_p4),31));
    tmp_4_fu_365_p4 <= dst_1(31 downto 2);
    tmp_5_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_379_p4),31));
    tmp_5_fu_379_p4 <= dst_0(31 downto 2);
    tmp_6_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_1_reg_278),31));
end behav;
