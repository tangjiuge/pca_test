// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pca_step1,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=971,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=2748,HLS_SYN_LUT=3305,HLS_VERSION=2018_3}" *)

module pca_step1 (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] src_0;
wire   [31:0] src_1;
wire   [31:0] src_2;
wire   [31:0] src_3;
wire   [31:0] src_4;
wire   [31:0] dst_0;
wire   [31:0] dst_1;
wire   [31:0] dst_2;
wire   [31:0] dst_3;
wire   [31:0] dst_4;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state25;
reg   [2:0] r_reg_242;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state26;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state31;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [31:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
wire   [31:0] grp_aesl_mux_load_5_5_x_s_fu_290_ap_return;
reg   [31:0] reg_317;
wire    ap_CS_fsm_state4;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_ap_ready;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_ap_done;
wire    ap_CS_fsm_state21;
wire   [30:0] tmp_1_cast_fu_333_p1;
reg   [30:0] tmp_1_cast_reg_598;
wire   [30:0] tmp_2_cast_fu_347_p1;
reg   [30:0] tmp_2_cast_reg_603;
wire   [30:0] tmp_3_cast_fu_361_p1;
reg   [30:0] tmp_3_cast_reg_608;
wire   [30:0] tmp_4_cast_fu_375_p1;
reg   [30:0] tmp_4_cast_reg_613;
wire   [30:0] tmp_5_cast_fu_389_p1;
reg   [30:0] tmp_5_cast_reg_618;
reg   [29:0] src_49_reg_623;
reg   [29:0] src_37_reg_628;
reg   [29:0] src_25_reg_633;
reg   [29:0] src_13_reg_638;
reg   [29:0] src_01_reg_643;
wire   [2:0] r_1_fu_489_p2;
reg   [2:0] r_1_reg_651;
wire    ap_CS_fsm_state2;
wire   [2:0] c_2_fu_501_p2;
reg   [2:0] c_2_reg_659;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_306_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_311_p2;
reg   [31:0] average_reg_669;
wire    ap_CS_fsm_state19;
wire   [2:0] c_3_fu_513_p2;
reg   [2:0] c_3_reg_677;
wire    ap_CS_fsm_state20;
wire   [30:0] dst_012_sum_fu_523_p2;
reg   [30:0] dst_012_sum_reg_682;
wire   [0:0] exitcond_fu_507_p2;
wire   [30:0] dst_114_sum_fu_528_p2;
reg   [30:0] dst_114_sum_reg_687;
wire   [30:0] dst_216_sum_fu_533_p2;
reg   [30:0] dst_216_sum_reg_692;
wire   [30:0] dst_318_sum_fu_538_p2;
reg   [30:0] dst_318_sum_reg_697;
wire   [30:0] dst_420_sum_fu_543_p2;
reg   [30:0] dst_420_sum_reg_702;
reg   [31:0] tmp_7_reg_707;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_predicate_op142_writereq_state25;
reg    ap_block_state25_io;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_ap_start;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_ap_idle;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWVALID;
wire   [31:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWADDR;
wire   [0:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWID;
wire   [31:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWLEN;
wire   [2:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWSIZE;
wire   [1:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWBURST;
wire   [1:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWLOCK;
wire   [3:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWCACHE;
wire   [2:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWPROT;
wire   [3:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWQOS;
wire   [3:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWREGION;
wire   [0:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWUSER;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WVALID;
wire   [31:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WDATA;
wire   [3:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WSTRB;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WLAST;
wire   [0:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WID;
wire   [0:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WUSER;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARVALID;
wire   [31:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARADDR;
wire   [0:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARID;
wire   [31:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLEN;
wire   [2:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARSIZE;
wire   [1:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARBURST;
wire   [1:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLOCK;
wire   [3:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARCACHE;
wire   [2:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARPROT;
wire   [3:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARQOS;
wire   [3:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARREGION;
wire   [0:0] grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARUSER;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_RREADY;
wire    grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_BREADY;
reg   [2:0] grp_aesl_mux_load_5_5_x_s_fu_290_empty;
reg   [2:0] c_reg_254;
wire   [0:0] exitcond2_fu_483_p2;
reg   [31:0] sum_reg_266;
reg   [2:0] c_1_reg_278;
reg    ap_predicate_op176_writeresp_state31;
reg    ap_block_state31;
reg    grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg;
wire   [0:0] exitcond1_fu_495_p2;
wire   [63:0] dst_012_sum_cast_fu_548_p1;
wire   [63:0] dst_114_sum_cast_fu_558_p1;
wire   [63:0] dst_216_sum_cast_fu_568_p1;
wire   [63:0] dst_318_sum_cast_fu_578_p1;
wire   [63:0] dst_420_sum_cast_fu_588_p1;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_predicate_op147_write_state26;
reg    ap_block_state26_io;
reg   [31:0] grp_fu_306_p0;
reg   [31:0] grp_fu_306_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state22;
wire   [29:0] tmp_1_fu_323_p4;
wire   [29:0] tmp_2_fu_337_p4;
wire   [29:0] tmp_3_fu_351_p4;
wire   [29:0] tmp_4_fu_365_p4;
wire   [29:0] tmp_5_fu_379_p4;
wire   [30:0] tmp_6_cast_fu_519_p1;
reg   [1:0] grp_fu_306_opcode;
reg    grp_fu_306_ce;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
reg   [30:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
#0 grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

pca_step1_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
pca_step1_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd1065353216),
    .src_0(src_0),
    .src_1(src_1),
    .src_2(src_2),
    .src_3(src_3),
    .src_4(src_4),
    .dst_0(dst_0),
    .dst_1(dst_1),
    .dst_2(dst_2),
    .dst_3(dst_3),
    .dst_4(dst_4)
);

pca_step1_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
pca_step1_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARADDR),
    .I_ARID(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARID),
    .I_ARLEN(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLEN),
    .I_ARSIZE(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARSIZE),
    .I_ARLOCK(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLOCK),
    .I_ARCACHE(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARCACHE),
    .I_ARQOS(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARQOS),
    .I_ARPROT(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARPROT),
    .I_ARUSER(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARUSER),
    .I_ARBURST(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARBURST),
    .I_ARREGION(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_7_reg_707),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

aesl_mux_load_5_5_x_s grp_aesl_mux_load_5_5_x_s_fu_290(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aesl_mux_load_5_5_x_s_fu_290_ap_start),
    .ap_done(grp_aesl_mux_load_5_5_x_s_fu_290_ap_done),
    .ap_idle(grp_aesl_mux_load_5_5_x_s_fu_290_ap_idle),
    .ap_ready(grp_aesl_mux_load_5_5_x_s_fu_290_ap_ready),
    .m_axi_empty_4_AWVALID(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWVALID),
    .m_axi_empty_4_AWREADY(1'b0),
    .m_axi_empty_4_AWADDR(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWADDR),
    .m_axi_empty_4_AWID(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWID),
    .m_axi_empty_4_AWLEN(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWLEN),
    .m_axi_empty_4_AWSIZE(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWSIZE),
    .m_axi_empty_4_AWBURST(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWBURST),
    .m_axi_empty_4_AWLOCK(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWLOCK),
    .m_axi_empty_4_AWCACHE(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWCACHE),
    .m_axi_empty_4_AWPROT(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWPROT),
    .m_axi_empty_4_AWQOS(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWQOS),
    .m_axi_empty_4_AWREGION(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWREGION),
    .m_axi_empty_4_AWUSER(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_AWUSER),
    .m_axi_empty_4_WVALID(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WVALID),
    .m_axi_empty_4_WREADY(1'b0),
    .m_axi_empty_4_WDATA(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WDATA),
    .m_axi_empty_4_WSTRB(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WSTRB),
    .m_axi_empty_4_WLAST(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WLAST),
    .m_axi_empty_4_WID(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WID),
    .m_axi_empty_4_WUSER(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_WUSER),
    .m_axi_empty_4_ARVALID(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARVALID),
    .m_axi_empty_4_ARREADY(gmem_ARREADY),
    .m_axi_empty_4_ARADDR(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARADDR),
    .m_axi_empty_4_ARID(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARID),
    .m_axi_empty_4_ARLEN(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLEN),
    .m_axi_empty_4_ARSIZE(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARSIZE),
    .m_axi_empty_4_ARBURST(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARBURST),
    .m_axi_empty_4_ARLOCK(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARLOCK),
    .m_axi_empty_4_ARCACHE(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARCACHE),
    .m_axi_empty_4_ARPROT(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARPROT),
    .m_axi_empty_4_ARQOS(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARQOS),
    .m_axi_empty_4_ARREGION(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARREGION),
    .m_axi_empty_4_ARUSER(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARUSER),
    .m_axi_empty_4_RVALID(gmem_RVALID),
    .m_axi_empty_4_RREADY(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_RREADY),
    .m_axi_empty_4_RDATA(gmem_RDATA),
    .m_axi_empty_4_RLAST(gmem_RLAST),
    .m_axi_empty_4_RID(gmem_RID),
    .m_axi_empty_4_RUSER(gmem_RUSER),
    .m_axi_empty_4_RRESP(gmem_RRESP),
    .m_axi_empty_4_BVALID(1'b0),
    .m_axi_empty_4_BREADY(grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_BREADY),
    .m_axi_empty_4_BRESP(2'd0),
    .m_axi_empty_4_BID(1'd0),
    .m_axi_empty_4_BUSER(1'd0),
    .p_offset(src_01_reg_643),
    .p_offset1(src_13_reg_638),
    .p_offset2(src_25_reg_633),
    .p_offset3(src_37_reg_628),
    .p_offset4(src_49_reg_623),
    .empty_5(r_reg_242),
    .empty(grp_aesl_mux_load_5_5_x_s_fu_290_empty),
    .ap_return(grp_aesl_mux_load_5_5_x_s_fu_290_ap_return)
);

pca_step1_faddfsubkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pca_step1_faddfsubkb_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_306_p0),
    .din1(grp_fu_306_p1),
    .opcode(grp_fu_306_opcode),
    .ce(grp_fu_306_ce),
    .dout(grp_fu_306_p2)
);

pca_step1_fdiv_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pca_step1_fdiv_32cud_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_reg_266),
    .din1(32'd1084227584),
    .ce(1'b1),
    .dout(grp_fu_311_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((((ap_predicate_op142_writereq_state25 == 1'b1) & (1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25)) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd3)) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd2)) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd1)) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd0)))) begin
            ap_reg_ioackin_gmem_AWREADY <= 1'b0;
        end else if ((((ap_predicate_op142_writereq_state25 == 1'b1) & (gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd3)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd2)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd1)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd0)))) begin
            ap_reg_ioackin_gmem_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state26_io) & (ap_predicate_op147_write_state26 == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd3)) | ((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd2)) | ((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd1)) | ((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd0)))) begin
            ap_reg_ioackin_gmem_WREADY <= 1'b0;
        end else if ((((ap_predicate_op147_write_state26 == 1'b1) & (gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd3)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd2)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd1)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd0)))) begin
            ap_reg_ioackin_gmem_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg <= 1'b0;
    end else begin
        if ((((exitcond_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20)) | ((exitcond1_fu_495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg <= 1'b1;
        end else if ((grp_aesl_mux_load_5_5_x_s_fu_290_ap_ready == 1'b1)) begin
            grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_predicate_op176_writeresp_state31 == 1'b1) & (gmem_BVALID == 1'b0)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd3)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd2)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd1)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd0))) & (1'b1 == ap_CS_fsm_state31))) begin
        c_1_reg_278 <= c_3_reg_677;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        c_1_reg_278 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_reg_254 <= c_2_reg_659;
    end else if (((exitcond2_fu_483_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_reg_254 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_507_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        r_reg_242 <= r_1_reg_651;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_242 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_reg_266 <= grp_fu_306_p2;
    end else if (((exitcond2_fu_483_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_reg_266 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        average_reg_669 <= grp_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_2_reg_659 <= c_2_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        c_3_reg_677 <= c_3_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        dst_012_sum_reg_682 <= dst_012_sum_fu_523_p2;
        dst_114_sum_reg_687 <= dst_114_sum_fu_528_p2;
        dst_216_sum_reg_692 <= dst_216_sum_fu_533_p2;
        dst_318_sum_reg_697 <= dst_318_sum_fu_538_p2;
        dst_420_sum_reg_702 <= dst_420_sum_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_1_reg_651 <= r_1_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_aesl_mux_load_5_5_x_s_fu_290_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((grp_aesl_mux_load_5_5_x_s_fu_290_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_317 <= grp_aesl_mux_load_5_5_x_s_fu_290_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        src_01_reg_643 <= {{src_0[31:2]}};
        src_13_reg_638 <= {{src_1[31:2]}};
        src_25_reg_633 <= {{src_2[31:2]}};
        src_37_reg_628 <= {{src_3[31:2]}};
        src_49_reg_623 <= {{src_4[31:2]}};
        tmp_1_cast_reg_598[29 : 0] <= tmp_1_cast_fu_333_p1[29 : 0];
        tmp_2_cast_reg_603[29 : 0] <= tmp_2_cast_fu_347_p1[29 : 0];
        tmp_3_cast_reg_608[29 : 0] <= tmp_3_cast_fu_361_p1[29 : 0];
        tmp_4_cast_reg_613[29 : 0] <= tmp_4_cast_fu_375_p1[29 : 0];
        tmp_5_cast_reg_618[29 : 0] <= tmp_5_cast_fu_389_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25))) begin
        tmp_7_reg_707 <= grp_fu_306_p2;
    end
end

always @ (*) begin
    if (((exitcond2_fu_483_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_483_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20)) | ((exitcond1_fu_495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARVALID = grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
        if ((ap_predicate_op142_writereq_state25 == 1'b1)) begin
            gmem_AWADDR = dst_420_sum_cast_fu_588_p1;
        end else if ((r_reg_242 == 3'd0)) begin
            gmem_AWADDR = dst_012_sum_cast_fu_548_p1;
        end else if ((r_reg_242 == 3'd1)) begin
            gmem_AWADDR = dst_114_sum_cast_fu_558_p1;
        end else if ((r_reg_242 == 3'd2)) begin
            gmem_AWADDR = dst_216_sum_cast_fu_568_p1;
        end else if ((r_reg_242 == 3'd3)) begin
            gmem_AWADDR = dst_318_sum_cast_fu_578_p1;
        end else begin
            gmem_AWADDR = 'bx;
        end
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op142_writereq_state25 == 1'b1) & (ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd3)) | ((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd2)) | ((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd1)) | ((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd0)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~(((ap_predicate_op176_writeresp_state31 == 1'b1) & (gmem_BVALID == 1'b0)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd3)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd2)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd1)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd0))) & (ap_predicate_op176_writeresp_state31 == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | (~(((ap_predicate_op176_writeresp_state31 == 1'b1) & (gmem_BVALID == 1'b0)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd3)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd2)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd1)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd0))) & (1'b1 == ap_CS_fsm_state31) & (r_reg_242 == 3'd3)) | (~(((ap_predicate_op176_writeresp_state31 == 1'b1) & (gmem_BVALID == 1'b0)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd3)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd2)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd1)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd0))) & (1'b1 == ap_CS_fsm_state31) & (r_reg_242 == 3'd2)) | (~(((ap_predicate_op176_writeresp_state31 == 1'b1) & (gmem_BVALID == 1'b0)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd3)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd2)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd1)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd0))) & (1'b1 == ap_CS_fsm_state31) & (r_reg_242 == 3'd1)) | (~(((ap_predicate_op176_writeresp_state31 == 1'b1) & (gmem_BVALID == 1'b0)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd3)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd2)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd1)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd0))) & (1'b1 == ap_CS_fsm_state31) & (r_reg_242 == 3'd0)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20)) | ((exitcond1_fu_495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_RREADY = grp_aesl_mux_load_5_5_x_s_fu_290_m_axi_empty_4_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op147_write_state26 == 1'b1) & (ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd3)) | ((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd2)) | ((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd1)) | ((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd0)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~(r_reg_242 == 3'd3) & ~(r_reg_242 == 3'd2) & ~(r_reg_242 == 3'd1) & ~(r_reg_242 == 3'd0) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd3)) | ((1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd2)) | ((1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd1)) | ((1'b1 == ap_CS_fsm_state25) & (r_reg_242 == 3'd0)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((~(r_reg_242 == 3'd3) & ~(r_reg_242 == 3'd2) & ~(r_reg_242 == 3'd1) & ~(r_reg_242 == 3'd0) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == ap_CS_fsm_state31) & (r_reg_242 == 3'd3)) | ((1'b1 == ap_CS_fsm_state31) & (r_reg_242 == 3'd2)) | ((1'b1 == ap_CS_fsm_state31) & (r_reg_242 == 3'd1)) | ((1'b1 == ap_CS_fsm_state31) & (r_reg_242 == 3'd0)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((~(r_reg_242 == 3'd3) & ~(r_reg_242 == 3'd2) & ~(r_reg_242 == 3'd1) & ~(r_reg_242 == 3'd0) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd3)) | ((1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd2)) | ((1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd1)) | ((1'b1 == ap_CS_fsm_state26) & (r_reg_242 == 3'd0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_aesl_mux_load_5_5_x_s_fu_290_empty = c_1_reg_278;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_aesl_mux_load_5_5_x_s_fu_290_empty = c_reg_254;
    end else begin
        grp_aesl_mux_load_5_5_x_s_fu_290_empty = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25)))) begin
        grp_fu_306_ce = 1'b1;
    end else begin
        grp_fu_306_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_306_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_306_opcode = 2'd0;
    end else begin
        grp_fu_306_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_306_p0 = reg_317;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_306_p0 = sum_reg_266;
    end else begin
        grp_fu_306_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_306_p1 = average_reg_669;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_306_p1 = reg_317;
    end else begin
        grp_fu_306_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_483_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_aesl_mux_load_5_5_x_s_fu_290_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((exitcond_fu_507_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((grp_aesl_mux_load_5_5_x_s_fu_290_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if ((~(((ap_predicate_op176_writeresp_state31 == 1'b1) & (gmem_BVALID == 1'b0)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd3)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd2)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd1)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd0))) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state25_io = (((ap_predicate_op142_writereq_state25 == 1'b1) & (ap_sig_ioackin_gmem_AWREADY == 1'b0)) | ((ap_sig_ioackin_gmem_AWREADY == 1'b0) & (r_reg_242 == 3'd3)) | ((ap_sig_ioackin_gmem_AWREADY == 1'b0) & (r_reg_242 == 3'd2)) | ((ap_sig_ioackin_gmem_AWREADY == 1'b0) & (r_reg_242 == 3'd1)) | ((ap_sig_ioackin_gmem_AWREADY == 1'b0) & (r_reg_242 == 3'd0)));
end

always @ (*) begin
    ap_block_state26_io = (((ap_predicate_op147_write_state26 == 1'b1) & (ap_sig_ioackin_gmem_WREADY == 1'b0)) | ((ap_sig_ioackin_gmem_WREADY == 1'b0) & (r_reg_242 == 3'd3)) | ((ap_sig_ioackin_gmem_WREADY == 1'b0) & (r_reg_242 == 3'd2)) | ((ap_sig_ioackin_gmem_WREADY == 1'b0) & (r_reg_242 == 3'd1)) | ((ap_sig_ioackin_gmem_WREADY == 1'b0) & (r_reg_242 == 3'd0)));
end

always @ (*) begin
    ap_block_state31 = (((ap_predicate_op176_writeresp_state31 == 1'b1) & (gmem_BVALID == 1'b0)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd3)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd2)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd1)) | ((gmem_BVALID == 1'b0) & (r_reg_242 == 3'd0)));
end

always @ (*) begin
    ap_predicate_op142_writereq_state25 = (~(r_reg_242 == 3'd3) & ~(r_reg_242 == 3'd2) & ~(r_reg_242 == 3'd1) & ~(r_reg_242 == 3'd0));
end

always @ (*) begin
    ap_predicate_op147_write_state26 = (~(r_reg_242 == 3'd3) & ~(r_reg_242 == 3'd2) & ~(r_reg_242 == 3'd1) & ~(r_reg_242 == 3'd0));
end

always @ (*) begin
    ap_predicate_op176_writeresp_state31 = (~(r_reg_242 == 3'd3) & ~(r_reg_242 == 3'd2) & ~(r_reg_242 == 3'd1) & ~(r_reg_242 == 3'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_2_fu_501_p2 = (c_reg_254 + 3'd1);

assign c_3_fu_513_p2 = (c_1_reg_278 + 3'd1);

assign dst_012_sum_cast_fu_548_p1 = dst_012_sum_reg_682;

assign dst_012_sum_fu_523_p2 = (tmp_6_cast_fu_519_p1 + tmp_5_cast_reg_618);

assign dst_114_sum_cast_fu_558_p1 = dst_114_sum_reg_687;

assign dst_114_sum_fu_528_p2 = (tmp_6_cast_fu_519_p1 + tmp_4_cast_reg_613);

assign dst_216_sum_cast_fu_568_p1 = dst_216_sum_reg_692;

assign dst_216_sum_fu_533_p2 = (tmp_6_cast_fu_519_p1 + tmp_3_cast_reg_608);

assign dst_318_sum_cast_fu_578_p1 = dst_318_sum_reg_697;

assign dst_318_sum_fu_538_p2 = (tmp_6_cast_fu_519_p1 + tmp_2_cast_reg_603);

assign dst_420_sum_cast_fu_588_p1 = dst_420_sum_reg_702;

assign dst_420_sum_fu_543_p2 = (tmp_6_cast_fu_519_p1 + tmp_1_cast_reg_598);

assign exitcond1_fu_495_p2 = ((c_reg_254 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_483_p2 = ((r_reg_242 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_fu_507_p2 = ((c_1_reg_278 == 3'd5) ? 1'b1 : 1'b0);

assign grp_aesl_mux_load_5_5_x_s_fu_290_ap_start = grp_aesl_mux_load_5_5_x_s_fu_290_ap_start_reg;

assign r_1_fu_489_p2 = (r_reg_242 + 3'd1);

assign tmp_1_cast_fu_333_p1 = tmp_1_fu_323_p4;

assign tmp_1_fu_323_p4 = {{dst_4[31:2]}};

assign tmp_2_cast_fu_347_p1 = tmp_2_fu_337_p4;

assign tmp_2_fu_337_p4 = {{dst_3[31:2]}};

assign tmp_3_cast_fu_361_p1 = tmp_3_fu_351_p4;

assign tmp_3_fu_351_p4 = {{dst_2[31:2]}};

assign tmp_4_cast_fu_375_p1 = tmp_4_fu_365_p4;

assign tmp_4_fu_365_p4 = {{dst_1[31:2]}};

assign tmp_5_cast_fu_389_p1 = tmp_5_fu_379_p4;

assign tmp_5_fu_379_p4 = {{dst_0[31:2]}};

assign tmp_6_cast_fu_519_p1 = c_1_reg_278;

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_598[30] <= 1'b0;
    tmp_2_cast_reg_603[30] <= 1'b0;
    tmp_3_cast_reg_608[30] <= 1'b0;
    tmp_4_cast_reg_613[30] <= 1'b0;
    tmp_5_cast_reg_618[30] <= 1'b0;
end

endmodule //pca_step1
