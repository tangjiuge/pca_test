// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_core_1,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=447621,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1631,HLS_SYN_LUT=1987,HLS_VERSION=2018_3}" *)

module hls_core_1 (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] feature_src;
wire   [31:0] weight_src;
wire   [31:0] bias;
wire   [31:0] feature_dst;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state16;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state24;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state25;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state30;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
wire   [31:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
wire   [30:0] tmp_28_cast_fu_366_p1;
reg   [30:0] tmp_28_cast_reg_727;
wire   [32:0] tmp_29_cast_fu_380_p1;
reg   [32:0] tmp_29_cast_reg_732;
wire   [32:0] tmp_34_cast_fu_394_p1;
reg   [32:0] tmp_34_cast_reg_737;
wire   [10:0] next_mul_fu_398_p2;
reg   [10:0] next_mul_reg_742;
wire    ap_CS_fsm_state2;
wire   [1:0] kernel_index_1_fu_410_p2;
reg   [1:0] kernel_index_1_reg_750;
wire   [1:0] tmp_12_fu_416_p2;
reg   [1:0] tmp_12_reg_755;
wire   [0:0] exitcond5_fu_404_p2;
wire   [4:0] step_img_x_1_fu_428_p2;
reg   [4:0] step_img_x_1_reg_763;
wire    ap_CS_fsm_state3;
wire   [9:0] out_pixel_2_fu_434_p2;
reg   [9:0] out_pixel_2_reg_768;
wire   [0:0] exitcond4_fu_422_p2;
wire   [9:0] step_img_y_cast_fu_440_p1;
reg   [9:0] step_img_y_cast_reg_773;
wire    ap_CS_fsm_state4;
wire   [4:0] step_img_y_1_fu_450_p2;
reg   [4:0] step_img_y_1_reg_781;
wire   [1:0] feature_src_index_1_fu_462_p2;
reg   [1:0] feature_src_index_1_reg_789;
wire    ap_CS_fsm_state5;
wire   [1:0] tmp_3_fu_494_p2;
reg   [1:0] tmp_3_reg_794;
wire   [0:0] exitcond2_fu_456_p2;
wire   [11:0] tmp_19_fu_504_p1;
reg   [11:0] tmp_19_reg_800;
wire   [30:0] feature_dst8_sum_fu_522_p2;
reg   [30:0] feature_dst8_sum_reg_805;
wire   [9:0] tmp_8_fu_527_p2;
reg   [9:0] tmp_8_reg_810;
wire   [1:0] step_w_x_1_fu_543_p2;
reg   [1:0] step_w_x_1_reg_818;
wire    ap_CS_fsm_state6;
wire   [4:0] tmp_5_fu_561_p2;
reg   [4:0] tmp_5_reg_823;
wire   [0:0] exitcond1_fu_537_p2;
reg   [8:0] tmp_20_reg_828;
wire   [6:0] tmp_22_fu_621_p1;
reg   [6:0] tmp_22_reg_833;
wire   [1:0] step_w_y_1_fu_635_p2;
reg   [1:0] step_w_y_1_reg_841;
wire    ap_CS_fsm_state7;
reg   [31:0] gmem_addr_1_reg_846;
wire   [0:0] exitcond_fu_629_p2;
reg   [31:0] gmem_addr_2_reg_852;
reg   [31:0] gmem_addr_1_read_reg_858;
reg   [31:0] gmem_addr_2_read_reg_863;
wire   [31:0] grp_fu_352_p2;
reg   [31:0] tmp_15_reg_868;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_347_p2;
wire    ap_CS_fsm_state23;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [1:0] kernel_index_reg_208;
reg   [10:0] phi_mul_reg_219;
reg   [4:0] step_img_x_reg_231;
wire   [0:0] exitcond3_fu_444_p2;
reg   [9:0] out_pixel_reg_243;
reg   [4:0] step_img_y_reg_255;
reg   [9:0] out_pixel_1_reg_266;
reg   [31:0] feature_temp_reg_277;
reg   [1:0] feature_src_index_reg_290;
reg   [1:0] step_w_x_reg_301;
reg   [31:0] feature_temp_1_reg_312;
reg   [31:0] feature_temp_2_reg_324;
reg   [1:0] step_w_y_reg_336;
wire   [63:0] feature_src2_sum9_ca_fu_670_p1;
wire   [63:0] weight_src4_sum1_cas_fu_707_p1;
wire   [63:0] feature_dst8_sum_cas_fu_717_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state17;
wire   [29:0] tmp_1_fu_356_p4;
wire   [29:0] tmp_2_fu_370_p4;
wire   [29:0] tmp_7_fu_384_p4;
wire   [5:0] tmp_16_fu_476_p3;
wire   [9:0] p_shl4_fu_484_p1;
wire   [9:0] p_shl_fu_468_p3;
wire   [9:0] tmp_s_fu_488_p2;
wire   [9:0] tmp_18_fu_499_p2;
wire   [10:0] out_pixel_1_cast_fu_508_p1;
wire   [10:0] tmp_6_fu_512_p2;
wire   [30:0] tmp_7_cast_fu_518_p1;
wire   [3:0] p_shl3_fu_549_p3;
wire   [4:0] p_shl3_cast_fu_557_p1;
wire   [4:0] step_w_x_cast9_fu_533_p1;
wire   [4:0] tmp_fu_567_p2;
wire   [9:0] p_shl1_fu_573_p3;
wire   [6:0] p_shl2_fu_585_p3;
wire   [10:0] p_shl1_cast_fu_581_p1;
wire   [10:0] p_shl2_cast_fu_593_p1;
wire   [10:0] tmp6_fu_597_p2;
wire   [4:0] tmp_21_fu_613_p4;
wire   [10:0] tmp2_fu_641_p3;
wire  signed [11:0] tmp2_cast_fu_648_p1;
wire   [11:0] tmp_11_fu_652_p2;
wire  signed [31:0] tmp_11_cast_fu_657_p1;
wire   [32:0] tmp_12_cast_fu_661_p1;
wire   [32:0] feature_src2_sum9_fu_665_p2;
wire   [4:0] step_w_y_cast6_fu_625_p1;
wire   [4:0] tmp4_fu_680_p2;
wire  signed [6:0] tmp4_cast_fu_685_p1;
wire   [6:0] tmp_13_fu_689_p2;
wire  signed [31:0] tmp_13_cast_fu_694_p1;
wire   [32:0] tmp_14_cast_fu_698_p1;
wire   [32:0] weight_src4_sum1_fu_702_p2;
reg   [29:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

hls_core_1_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
hls_core_1_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd1065353216),
    .feature_src(feature_src),
    .weight_src(weight_src),
    .bias(bias),
    .feature_dst(feature_dst)
);

hls_core_1_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
hls_core_1_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(feature_temp_reg_277),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

hls_core_1_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_core_1_fadd_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(feature_temp_2_reg_324),
    .din1(tmp_15_reg_868),
    .ce(1'b1),
    .dout(grp_fu_347_p2)
);

hls_core_1_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_core_1_fmul_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_1_read_reg_858),
    .din1(gmem_addr_2_read_reg_863),
    .ce(1'b1),
    .dout(grp_fu_352_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_537_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        feature_src_index_reg_290 <= feature_src_index_1_reg_789;
    end else if (((exitcond3_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        feature_src_index_reg_290 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        feature_temp_1_reg_312 <= feature_temp_2_reg_324;
    end else if (((exitcond2_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        feature_temp_1_reg_312 <= feature_temp_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        feature_temp_2_reg_324 <= grp_fu_347_p2;
    end else if (((exitcond1_fu_537_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        feature_temp_2_reg_324 <= feature_temp_1_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_537_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        feature_temp_reg_277 <= feature_temp_1_reg_312;
    end else if (((exitcond3_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        feature_temp_reg_277 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_index_reg_208 <= 2'd0;
    end else if (((exitcond4_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_index_reg_208 <= kernel_index_1_reg_750;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        out_pixel_1_reg_266 <= tmp_8_reg_810;
    end else if (((exitcond4_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_pixel_1_reg_266 <= out_pixel_reg_243;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_pixel_reg_243 <= out_pixel_2_reg_768;
    end else if (((exitcond5_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_pixel_reg_243 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_219 <= 11'd0;
    end else if (((exitcond4_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_219 <= next_mul_reg_742;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        step_img_x_reg_231 <= step_img_x_1_reg_763;
    end else if (((exitcond5_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        step_img_x_reg_231 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        step_img_y_reg_255 <= step_img_y_1_reg_781;
    end else if (((exitcond4_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        step_img_y_reg_255 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        step_w_x_reg_301 <= step_w_x_1_reg_818;
    end else if (((exitcond2_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        step_w_x_reg_301 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        step_w_y_reg_336 <= step_w_y_1_reg_841;
    end else if (((exitcond1_fu_537_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        step_w_y_reg_336 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_456_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        feature_dst8_sum_reg_805 <= feature_dst8_sum_fu_522_p2;
        tmp_8_reg_810 <= tmp_8_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        feature_src_index_1_reg_789 <= feature_src_index_1_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        gmem_addr_1_read_reg_858 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_629_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        gmem_addr_1_reg_846 <= feature_src2_sum9_ca_fu_670_p1;
        gmem_addr_2_reg_852 <= weight_src4_sum1_cas_fu_707_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        gmem_addr_2_read_reg_863 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_index_1_reg_750 <= kernel_index_1_fu_410_p2;
        next_mul_reg_742 <= next_mul_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_pixel_2_reg_768 <= out_pixel_2_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        step_img_x_1_reg_763 <= step_img_x_1_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        step_img_y_1_reg_781 <= step_img_y_1_fu_450_p2;
        step_img_y_cast_reg_773[4 : 0] <= step_img_y_cast_fu_440_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        step_w_x_1_reg_818 <= step_w_x_1_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        step_w_y_1_reg_841 <= step_w_y_1_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_12_reg_755[1] <= tmp_12_fu_416_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_15_reg_868 <= grp_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_19_reg_800[9 : 0] <= tmp_19_fu_504_p1[9 : 0];
        tmp_3_reg_794 <= tmp_3_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_537_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_20_reg_828 <= {{tmp6_fu_597_p2[10:2]}};
        tmp_22_reg_833[1 : 0] <= tmp_22_fu_621_p1[1 : 0];
tmp_22_reg_833[4 : 3] <= tmp_22_fu_621_p1[4 : 3];
        tmp_5_reg_823 <= tmp_5_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_28_cast_reg_727[29 : 0] <= tmp_28_cast_fu_366_p1[29 : 0];
        tmp_29_cast_reg_732[29 : 0] <= tmp_29_cast_fu_380_p1[29 : 0];
        tmp_34_cast_reg_737[29 : 0] <= tmp_34_cast_fu_394_p1[29 : 0];
    end
end

always @ (*) begin
    if (((exitcond5_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            gmem_ARADDR = gmem_addr_2_reg_852;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            gmem_ARADDR = gmem_addr_1_reg_846;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond4_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond2_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond1_fu_537_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state24 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_537_p2 = ((step_w_x_reg_301 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_456_p2 = ((feature_src_index_reg_290 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond3_fu_444_p2 = ((step_img_y_reg_255 == 5'd26) ? 1'b1 : 1'b0);

assign exitcond4_fu_422_p2 = ((step_img_x_reg_231 == 5'd26) ? 1'b1 : 1'b0);

assign exitcond5_fu_404_p2 = ((kernel_index_reg_208 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_629_p2 = ((step_w_y_reg_336 == 2'd3) ? 1'b1 : 1'b0);

assign feature_dst8_sum_cas_fu_717_p1 = feature_dst8_sum_reg_805;

assign feature_dst8_sum_fu_522_p2 = (tmp_7_cast_fu_518_p1 + tmp_28_cast_reg_727);

assign feature_src2_sum9_ca_fu_670_p1 = feature_src2_sum9_fu_665_p2;

assign feature_src2_sum9_fu_665_p2 = (tmp_12_cast_fu_661_p1 + tmp_34_cast_reg_737);

assign feature_src_index_1_fu_462_p2 = (feature_src_index_reg_290 + 2'd1);

assign gmem_AWADDR = feature_dst8_sum_cas_fu_717_p1;

assign kernel_index_1_fu_410_p2 = (kernel_index_reg_208 + 2'd1);

assign next_mul_fu_398_p2 = (phi_mul_reg_219 + 11'd676);

assign out_pixel_1_cast_fu_508_p1 = out_pixel_1_reg_266;

assign out_pixel_2_fu_434_p2 = (out_pixel_reg_243 + 10'd26);

assign p_shl1_cast_fu_581_p1 = p_shl1_fu_573_p3;

assign p_shl1_fu_573_p3 = {{tmp_fu_567_p2}, {5'd0}};

assign p_shl2_cast_fu_593_p1 = p_shl2_fu_585_p3;

assign p_shl2_fu_585_p3 = {{tmp_fu_567_p2}, {2'd0}};

assign p_shl3_cast_fu_557_p1 = p_shl3_fu_549_p3;

assign p_shl3_fu_549_p3 = {{step_w_x_reg_301}, {2'd0}};

assign p_shl4_fu_484_p1 = tmp_16_fu_476_p3;

assign p_shl_fu_468_p3 = {{feature_src_index_reg_290}, {8'd0}};

assign step_img_x_1_fu_428_p2 = (step_img_x_reg_231 + 5'd1);

assign step_img_y_1_fu_450_p2 = (step_img_y_reg_255 + 5'd1);

assign step_img_y_cast_fu_440_p1 = step_img_y_reg_255;

assign step_w_x_1_fu_543_p2 = (step_w_x_reg_301 + 2'd1);

assign step_w_x_cast9_fu_533_p1 = step_w_x_reg_301;

assign step_w_y_1_fu_635_p2 = (step_w_y_reg_336 + 2'd1);

assign step_w_y_cast6_fu_625_p1 = step_w_y_reg_336;

assign tmp2_cast_fu_648_p1 = $signed(tmp2_fu_641_p3);

assign tmp2_fu_641_p3 = {{tmp_20_reg_828}, {step_w_y_reg_336}};

assign tmp4_cast_fu_685_p1 = $signed(tmp4_fu_680_p2);

assign tmp4_fu_680_p2 = (step_w_y_cast6_fu_625_p1 + tmp_5_reg_823);

assign tmp6_fu_597_p2 = (p_shl1_cast_fu_581_p1 - p_shl2_cast_fu_593_p1);

assign tmp_11_cast_fu_657_p1 = $signed(tmp_11_fu_652_p2);

assign tmp_11_fu_652_p2 = ($signed(tmp_19_reg_800) + $signed(tmp2_cast_fu_648_p1));

assign tmp_12_cast_fu_661_p1 = $unsigned(tmp_11_cast_fu_657_p1);

assign tmp_12_fu_416_p2 = kernel_index_reg_208 << 2'd1;

assign tmp_13_cast_fu_694_p1 = $signed(tmp_13_fu_689_p2);

assign tmp_13_fu_689_p2 = ($signed(tmp_22_reg_833) + $signed(tmp4_cast_fu_685_p1));

assign tmp_14_cast_fu_698_p1 = $unsigned(tmp_13_cast_fu_694_p1);

assign tmp_16_fu_476_p3 = {{feature_src_index_reg_290}, {4'd0}};

assign tmp_18_fu_499_p2 = (tmp_s_fu_488_p2 + step_img_y_cast_reg_773);

assign tmp_19_fu_504_p1 = tmp_18_fu_499_p2;

assign tmp_1_fu_356_p4 = {{feature_dst[31:2]}};

assign tmp_21_fu_613_p4 = {{{tmp_3_reg_794}, {1'd0}}, {tmp_3_reg_794}};

assign tmp_22_fu_621_p1 = tmp_21_fu_613_p4;

assign tmp_28_cast_fu_366_p1 = tmp_1_fu_356_p4;

assign tmp_29_cast_fu_380_p1 = tmp_2_fu_370_p4;

assign tmp_2_fu_370_p4 = {{weight_src[31:2]}};

assign tmp_34_cast_fu_394_p1 = tmp_7_fu_384_p4;

assign tmp_3_fu_494_p2 = (tmp_12_reg_755 + feature_src_index_reg_290);

assign tmp_5_fu_561_p2 = (p_shl3_cast_fu_557_p1 - step_w_x_cast9_fu_533_p1);

assign tmp_6_fu_512_p2 = (out_pixel_1_cast_fu_508_p1 + phi_mul_reg_219);

assign tmp_7_cast_fu_518_p1 = tmp_6_fu_512_p2;

assign tmp_7_fu_384_p4 = {{feature_src[31:2]}};

assign tmp_8_fu_527_p2 = (out_pixel_1_reg_266 + 10'd1);

assign tmp_fu_567_p2 = (step_w_x_cast9_fu_533_p1 + step_img_x_reg_231);

assign tmp_s_fu_488_p2 = (p_shl4_fu_484_p1 - p_shl_fu_468_p3);

assign weight_src4_sum1_cas_fu_707_p1 = weight_src4_sum1_fu_702_p2;

assign weight_src4_sum1_fu_702_p2 = (tmp_14_cast_fu_698_p1 + tmp_29_cast_reg_732);

always @ (posedge ap_clk) begin
    tmp_28_cast_reg_727[30] <= 1'b0;
    tmp_29_cast_reg_732[32:30] <= 3'b000;
    tmp_34_cast_reg_737[32:30] <= 3'b000;
    tmp_12_reg_755[0] <= 1'b0;
    step_img_y_cast_reg_773[9:5] <= 5'b00000;
    tmp_19_reg_800[11:10] <= 2'b00;
    tmp_22_reg_833[2] <= 1'b0;
    tmp_22_reg_833[6:5] <= 2'b00;
end

endmodule //hls_core_1
